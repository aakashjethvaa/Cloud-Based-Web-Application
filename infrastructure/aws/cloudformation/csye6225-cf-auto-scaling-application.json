{

	"Description": "Creation of Stack for Assignment 4",
	"AWSTemplateFormatVersion": "2010-09-09",

	"Parameters": {
		"stackname": {
			"Description": "Stack Name",
			"Type": "String",
			"Default": "stack01"

		},
		"subnetid": {
			"Description": "Subnet Group name",
			"Type": "String"

		},
		"securitygrp": {
			"Description": "Security Group name",
			"Type": "String"

		},
		"VpcId": {
			"Description": "VPC ID",
			"Type": "String"

		},
		"instanceProfileName": {
			"Description": "InstanceProfileName",
			"Type": "String"

		},
		"s3artifact": {
			"Description": "s3 artifact bucket name",
			"Type": "String"
		},
		"s3attachment": {
			"Description": "s3 attachment bucket name",
			"Type": "String"
		},
                "hostedzone":{  
                      "Description":"Domain name",
                      "Type":"String"
                },
                "certARN":{  
                "Description":" SSL certificate ARN",
                "Type":"String"
                },
                "appname" : {
                "Description" : "Application Name",
                "Type" : "String"
                },
                "depname" : {
                "Description" : "Deployment Group Name",
                "Type" : "String"
                },
		"hzid" :{
			"Type":"String"
                }
	},

	"Resources": {
		"AsgLaunchConfig": {
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Properties": {
				"KeyName": "MyKeyPair",
				"AssociatePublicIpAddress": "true",
				"ImageId": "ami-9887c6e7",
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"\n",
							[
								"#!/bin/bash -xe",
								"yum install ruby ntp wget java-1.8.0-openjdk-devel -y",
								"systemctl start ntpd",
								"systemctl enable ntpd",
								"wget https://aws-codedeploy-us-east-1.s3.amazonaws.com/latest/install",
								"chmod +x ./install",
								"./install auto",
								"service codedeploy-agent start",
								"groupadd tomcat",
								"useradd -M -s /bin/nologin -g tomcat -d /opt/tomcat tomcat",
								"cd /tmp",
								"wget http://apache.mirrors.pair.com/tomcat/tomcat-8/v8.5.34/bin/apache-tomcat-8.5.34.tar.gz",
								"mkdir /opt/tomcat",
								"tar xvf apache-tomcat-8*tar.gz -C /opt/tomcat --strip-components=1",
								"cd /opt/tomcat",
								"chgrp -R tomcat /opt/tomcat",
								"chmod -R g+r conf",
								"chmod g+x conf",
								"chown -R tomcat webapps/ work/ temp/ logs/",
								"cd /usr/lib/systemd/system",
								"touch tomcat.service",
								"echo '[Unit]' > tomcat.service",
								"echo 'Description=Apache Tomcat Web Application Container' >> tomcat.service",
								"echo 'After=syslog.target network.target' >> tomcat.service",
								"echo '[Service]' >> tomcat.service",
								"echo 'Type=forking' >> tomcat.service",
								"echo 'Environment=JAVA_HOME=/usr/lib/jvm/jre' >> tomcat.service",
								"echo 'Environment=CATALINA_PID=/opt/tomcat/temp/tomcat.pid' >> tomcat.service",
								"echo 'Environment=CATALINA_HOME=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=CATALINA_BASE=/opt/tomcat' >> tomcat.service",
								"echo 'Environment=\"CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC\"' >> tomcat.service",
								{
									"Fn::Join": [
										"",
										[
											"echo 'Environment=\"JAVA_OPTS=-Djava.awt.headless=true -Djava.security.egd=file:/dev/./urandom -Dspring.datasource.username=csye6225master -Dspring.datasource.password=csye6225password -Dspring.profiles.active=dev -Dspring.datasource.url=jdbc:mysql://",
											{
												"Fn::GetAtt": [
													"MyRDS",
													"Endpoint.Address"
												]
											},
											":3306/csye6225\"' >> tomcat.service"
										]
									]
								},
								"echo 'ExecStart=/opt/tomcat/bin/startup.sh' >> tomcat.service",
								"echo 'ExecStop=/bin/kill -15 $MAINPID' >> tomcat.service",
								"echo 'User=tomcat' >> tomcat.service",
								"echo 'Group=tomcat' >> tomcat.service",
								"echo 'UMask=0007' >> tomcat.service",
								"echo 'RestartSec=10' >> tomcat.service",
								"echo 'Restart=always' >> tomcat.service",
								"echo '[Install]' >> tomcat.service",
								"echo 'WantedBy=multi-user.target' >> tomcat.service",
								"systemctl daemon-reload",
								"#systemctl start cloudwatch.service",
								"#systemctl enable cloudwatch.service",
								"systemctl enable tomcat.service",
								"systemctl start tomcat.service",
								"mkdir /opt/aws",
								"cd /home/centos",
								"wget https://s3.amazonaws.com/amazoncloudwatch-agent/centos/amd64/latest/amazon-cloudwatch-agent.rpm",
								"rpm -U ./amazon-cloudwatch-agent.rpm",
								"touch /opt/aws/config.json",
								"echo '{\"agent\":{\"metrics_collection_interval\":10,\"logfile\":\"/var/logs/amazon-cloudwatch-agent.log\"},\"metrics\":{\"metrics_collected\":{\"statsd\":{\"service_address\":\":8125\",\"metrics_collection_interval\":10,\"metrics_aggregation_interval\":30}}},\"logs\":{\"logs_collected\":{\"files\":{\"collect_list\":[{\"file_path\":\"/opt/tomcat/logs/catalina.out\",\"log_group_name\":\"csye6225_fall2018\",\"log_stream_name\":\"webapp\"}]}},\"log_stream_name\":\"cloudwatch_log_stream\"}}' >> /opt/aws/config.json",
								"/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/config.json -s",
								"systemctl restart amazon-cloudwatch-agent.service"
							]
						]
					}
				},
				"SecurityGroups": [{
					"Ref": "WebServerSecurityGroup"
				}],
				"IamInstanceProfile": {
					"Ref": "instanceProfileName"
				},
				"InstanceType": "t2.micro",
				"BlockDeviceMappings": [{
					"DeviceName": "/dev/sda1",
					"Ebs": {
						"DeleteOnTermination": true,
						"VolumeSize": 20,
						"VolumeType": "gp2"
					}
				}]
			}
		},

		"WebServerGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"Tags": [{
					"Key": "Name",
					"Value": "CSYE6225",
					"PropagateAtLaunch": true
				}],
				"VPCZoneIdentifier": [
					"subnet-0bfb423fbc3d9d7ed",
					"subnet-0bd29aa4f888fc6cb"
				],
				"LaunchConfigurationName": {
                                         "Ref": "AsgLaunchConfig"
				},
				"MinSize": "3",
				"MaxSize": "10",
				"DesiredCapacity": "3",
				"Cooldown": "60",
				"TargetGroupARNs": [{
					"Ref": "myTargetGroup"
				}],
				"MetricsCollection": [{
					"Granularity": "1Minute",
					"Metrics": [
						"GroupMinSize",
						"GroupMaxSize"
					]
				}]
			}},
			"WebServerScaleUpPolicy": {
				"Type": "AWS::AutoScaling::ScalingPolicy",
				"Properties": {
					"AdjustmentType": "ChangeInCapacity",
					"AutoScalingGroupName": {
						"Ref": "WebServerGroup"
					},
					"Cooldown": "60",
					"ScalingAdjustment": "1"
				}
			},
			"WebServerScaleDownPolicy": {
				"Type": "AWS::AutoScaling::ScalingPolicy",
				"Properties": {
					"AdjustmentType": "ChangeInCapacity",
					"AutoScalingGroupName": {
						"Ref": "WebServerGroup"
					},
					"Cooldown": "60",
					"ScalingAdjustment": "-1"
				}
			},
			"CPUAlarmHigh": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
					"MetricName": "CPUUtilization",
					"Namespace": "AWS/EC2",
					"Statistic": "Average",
					"Period": "300",
					"EvaluationPeriods": "2",
					"Threshold": "90",
					"AlarmActions": [{
						"Ref": "WebServerScaleUpPolicy"
					}],
					"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebServerGroup"
						}
					}],
					"ComparisonOperator": "GreaterThanThreshold"
				}
			},
			"CPUAlarmLow": {
				"Type": "AWS::CloudWatch::Alarm",
				"Properties": {
					"AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
					"MetricName": "CPUUtilization",
					"Namespace": "AWS/EC2",
					"Statistic": "Average",
					"Period": "300",
					"EvaluationPeriods": "2",
					"Threshold": "70",
					"AlarmActions": [{
						"Ref": "WebServerScaleDownPolicy"
					}],
					"Dimensions": [{
						"Name": "AutoScalingGroupName",
						"Value": {
							"Ref": "WebServerGroup"
						}
					}],
					"ComparisonOperator": "LessThanThreshold"
				}
			},
			"ElasticLoadBalancer": {
				"Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
				"Properties": {
                                        "Name": "ELB",
					"Scheme": "internet-facing",
					"Subnets": [

						"subnet-0bfb423fbc3d9d7ed",
						"subnet-0bd29aa4f888fc6cb"
					],
					"LoadBalancerAttributes": [{
						"Key": "idle_timeout.timeout_seconds",
						"Value": "60"
					}],
					"SecurityGroups": [{
						"Ref": "WebServerSecurityGroup"
					}],
					"Tags": [{
						"Key": "Name",
						"Value": "CSYE6225"
					}]
				}
			},
			"Listener": {
				"Type": "AWS::ElasticLoadBalancingV2::Listener",
				"Properties": {
					"Certificates": [{

						"CertificateArn":{
                                                 "Ref":"certARN"
                                        }
					}],
					"DefaultActions": [{
						"Type": "forward",
						"TargetGroupArn": {
							"Ref": "myTargetGroup"
						}
					}],
					"LoadBalancerArn": {
						"Ref": "ElasticLoadBalancer"
					},
					"Port": "443",
					"Protocol": "HTTPS"
				}
			},
			"myTargetGroup": {
				"Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
				"Properties": {
					"HealthCheckIntervalSeconds": 40,
					"HealthCheckTimeoutSeconds": 30,
					"Protocol": "HTTP",
					"HealthCheckProtocol": "HTTP",
					"HealthCheckPort": "8080",
					"TargetGroupAttributes": [{
						"Key": "deregistration_delay.timeout_seconds",
						"Value": "20"
					}],
					"Port": 8080,
					"VpcId": {
						"Ref": "VpcId"
					},
					"Tags": [{
						"Key": "Name",
						"Value": "CSYE6225"
					}]
				}
			},
			"myDNSRecord": {
				"Type": "AWS::Route53::RecordSet",
				"Properties": {
					"HostedZoneId": {
						"Ref": "hzid"
					},
					"Comment": "DNS name setting",
					"Name": {
							"Ref": "hostedzone"
						},
						"Type": "A",
						"AliasTarget": {
                                                     "HostedZoneId":{  
                                                        "Fn::GetAtt":[  
                                                            "ElasticLoadBalancer",
                                                            "CanonicalHostedZoneID"
                                                                    ]
                                                     },   
							
							"DNSName": {
								"Fn::GetAtt": [
									"ElasticLoadBalancer",
									"DNSName"
								]
							}
						}
				}
			},
			"WebServerSecurityGroup": {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupName": "csye6225-webapp",
					"GroupDescription": "Open http access ports 22, 80 & 443",
					"VpcId": {
						"Ref": "VpcId"
					},
					"SecurityGroupIngress": [{
							"IpProtocol": "tcp",
							"FromPort": "22",
							"ToPort": "22",
							"CidrIp": "0.0.0.0/0"
						},
						{
							"IpProtocol": "tcp",
							"FromPort": "80",
							"ToPort": "80",
							"CidrIp": "0.0.0.0/0"
						},
						{
							"IpProtocol": "tcp",
							"FromPort": "443",
							"ToPort": "443",
							"CidrIp": "0.0.0.0/0"
						}, {
							"IpProtocol": "tcp",
							"FromPort": "8080",
							"ToPort": "8080",
                                                        "CidrIp": "0.0.0.0/0"
						}
					],
					"Tags": [{
						"Key": "Name",
						"Value": "WebServerSecurityGroup"
					}]
				}
			},
			"DBEC2SecurityGroup": {
				"Type": "AWS::EC2::SecurityGroup",
				"Properties": {
					"GroupName": "csye6225-rds",
					"GroupDescription": "Open Mysql database access",
					"SecurityGroupIngress": [{
						"IpProtocol": "tcp",
						"FromPort": "3306",
						"ToPort": "3306",
						"SourceSecurityGroupId": {
							"Ref": "WebServerSecurityGroup"
						}
					}],
					"VpcId": {
						"Ref": "VpcId"
					}
				}
			},
			"S3": {
				"Type": "AWS::S3::Bucket",
				"Properties": {
					"BucketName": {
						"Ref": "s3attachment"
					}
				}
			},
			"CS3": {
				"Type": "AWS::S3::Bucket",
				"Properties": {
					"BucketName": {
						"Ref": "s3artifact"
					}
				}
			},

			"DynamoDBTable": {
				"Type": "AWS::DynamoDB::Table",
				"Properties": {
					"AttributeDefinitions": [{
						"AttributeName": "ID",
						"AttributeType": "S"
					}],
					"KeySchema": [{
						"AttributeName": "ID",
						"KeyType": "HASH"
					}],
					"ProvisionedThroughput": {
						"ReadCapacityUnits": "5",
						"WriteCapacityUnits": "5"
					},
					"TimeToLiveSpecification": {
						"AttributeName": "TTL",
						"Enabled": "TRUE"
					},
					"TableName": "csye6225"
				}
			},
			"MyRDS": {
				"Type": "AWS::RDS::DBInstance",
				"Properties": {
					"AllocatedStorage": "16",
					"Engine": "MYSQL",
					"EngineVersion": "5.6.37",
					"DBInstanceClass": "db.t2.micro",
					"MultiAZ": "false",
					"DBInstanceIdentifier": "csye6225-Fall2018",
					"AvailabilityZone": "us-east-1a",
					"MasterUsername": "csye6225master",
					"MasterUserPassword": "csye6225password",
					"DBSubnetGroupName": "csye6225-db-subnetgroup",
					"VPCSecurityGroups": [{
						"Ref": "DBEC2SecurityGroup"
					}],
					"PubliclyAccessible": "false",
					"DBName": "csye6225"
				}
			},
                       "CodeDeployServiceRole" : {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"],
              "AssumeRolePolicyDocument": {
                "Version" : "2012-10-17",
                "Statement": [ {
                "Effect": "Allow",
                "Principal": {
                  "Service": [ "ec2.amazonaws.com", "codedeploy.amazonaws.com"]
                  },
                "Action": [ "sts:AssumeRole" ]
                } ]
              },
          "RoleName": "CodeDeployServiceRole"
          }
        },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName" : {"Ref" : "appname"}
      }
    },
     "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName" : {"Ref" : "appname"},
          "DeploymentStyle": {
          "DeploymentType": "IN_PLACE",
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL"
        },
        "LoadBalancerInfo": {
          "ElbInfoList": [
            {
              "Name": "ELB"
            }
          ]
        },
         "AutoScalingGroups": [
          {
            "Ref": "WebServerGroup"
          }
        ],
        "Ec2TagFilters" : [{
          "Key" : "Name",
          "Value" : "CSYE6225",
          "Type" : "KEY_AND_VALUE"
        }],
        "ServiceRoleArn" : {"Fn::GetAtt" : ["CodeDeployServiceRole", "Arn"]},
        "DeploymentGroupName" : {"Ref" : "depname"}
      }
    }
  }
}

